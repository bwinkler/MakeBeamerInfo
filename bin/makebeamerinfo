#!/usr/bin/env perl

use strict;
use warnings;

#============================
# Filename: makebeamerinfo
# Author: Joel Berger
# Author's Email: joel.a.berger <at> gmail <dot> com
# Revision Date: Jan 25, 2012
# See verion info in lib/App/makebeamerinfo.pm
#
#============================
# Changelog information goes here:
#
# 2.0.0: A complete rewrite of the engine that parses the .nav file,
#   additional presets, and functioning GUI and CLI modes.
#
#============================
# License: GPLv3 or any later version. See http://www.gnu.org/licenses/ for more information.
#
#   Copyright (C) 2012 Joel Berger
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>

#============================
# Initialization
#============================

#============================
# Load packages:

use Getopt::Long;
use Pod::Usage;

#============================
# Parse in command line options and start program in GUI or CLI mode
#


my $opt_nav; # command option for nav file
my $opt_pdf; # command option for pdf file
my $help; # command switch to display help
my $if_gui; # boolean of operational mode, 1 = GUI, 0 = CLI
my $class; # full class name to invoke

BEGIN {
  $help = 0;
  $if_gui = ! @ARGV; # If no options given assume GUI mode
  GetOptions(
    'gui'    => \$if_gui,
    'help|?' => \$help,
    'nav:s'  => \$opt_nav,
    'pdf:s'  => \$opt_pdf,
  );

  pod2usage(0) if $help;

  if ($if_gui) {

    # test for Tk
    eval { require Tk };
    if ($@) {
      print <<MESSAGE;
Error: makebeamerinfo's "GUI mode" requires the Tk module to be installed.

Installation may be accomplished from CPAN using the command `cpan Tk` with
apropriate permissions. Many system package managers also provide Tk, on
Ubuntu Linux `sudo apt-get install perl-tk` should do the trick.
MESSAGE
      exit(1);
    }

    # Tk is present set $class
    $class = 'App::makebeamerinfo::GUI';
  } else {
    # CLI mode
    $class = 'App::makebeamerinfo::CLI';
  }

}

# use if module to avoid bareword problem
use if 1, $class;

#============================
# Use known information to find files

while (@ARGV) {
  my $arg = shift @ARGV;
  
  if ($arg =~ /\.nav$/) {
    $opt_nav = $arg;
  }

  if ($arg =~ /\.pdf$/) {
    $opt_pdf = $arg;
  }
}

my $app = $class->new( pdf => $opt_pdf, nav => $opt_nav );

#============================
# Start one interface or the other

$app->run;

## POD (my editor doesn't highlight after END tag)

=head1 NAME

makebeamerinfo - Creates .info file for use with Impressive and LaTeX Beamer

=head1 VERSION

2.0.0

=head1 SYNOPSIS

  makebeamerinfo                        # No args starts the program in GUI mode
  makebeamerinfo -p document.pdf        # Explicitly specify location of .pdf file
  makebeamerinfo --help/-h              # Shows a usage message

=head1 DESCRIPTION

Impressive is a pdf viewer that aids in viewing presentations made in LaTeX Beamer. Impressive uses a .info control file to specify the transitions used between pages. While is file isn't necessary, the Beamer-based presentation can be presented in a much more consistant style when the .info file is tuned to the individual presentation. C<makebeamerinfo> is designed to create this file based on an auxiliary file (F<.nav>) that Beamer creates in parallel with the presentation. It also does not require any configuration or tags in the presentation source.

=head1 OPTIONS AND ARGUMENTS

  makebeamerinfo [arguments] [files]

  Run with no arguments or files starts the program in GUI mode

  -g
  --gui 
      Explicitly request GUI mode

  -p
  --pdf
      Explicitly specify location of .pdf file

  -n
  --nav
      Explicitly specify location of .nav file

  Additional files may be specified without flags,
  their file type(s) will be inferred by file extension

  -h
  --help
      Shows a usage message and exit. Overrides all other options.

=cut

